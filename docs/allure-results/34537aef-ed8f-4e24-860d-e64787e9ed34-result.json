{"name": "test_scrapers[sephoraScraper]", "status": "failed", "statusDetails": {"message": "AssertionError: assert ['Beauty Adviser Full Time (8h/zi) - Palas, Iasi', 'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti', 'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova', 'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES', 'STORE MANAGER - VIVO CLUJ'] == ['Beauty Adviser Full Time (8h/zi) - Palas, Iasi', 'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti', 'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti', 'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES', 'STORE MANAGER - VIVO CLUJ']\n  At index 2 diff: 'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova' != 'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti'\n  Full diff:\n    [\n     'Beauty Adviser Full Time (8h/zi) - Palas, Iasi',\n     'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti',\n  -  'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti',\n  ?                                      ^  ^ ----------  ^^\n  +  'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova',\n  ?                                      ^^^^^  ^^^   ^^^^^ +++\n     'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES',\n     'STORE MANAGER - VIVO CLUJ',\n    ]", "trace": "self = <test_api.TestScrapers object at 0x7f1a4420a080>\nscraper_class = <class 'sites.sephora.sephoraScraper'>\n\n    @pytest.mark.regression\n    def test_scrapers(self, scraper_class):\n        setup_tests = SetupTests()\n        setup_tests.get_jobs_careers(scraper_class)\n    \n        # You can now use the utility methods from TestUtils to avoid code duplication\n        scraped_jobs_data = TestUtils.scrape_jobs(setup_tests.scraper_data[0])\n        peviitor_jobs_data = TestUtils.scrape_peviitor(setup_tests.scraper_data[1], 'RomÃ¢nia')\n    \n        # Test Title\n>       assert sorted(scraped_jobs_data[0]) == sorted(peviitor_jobs_data[0])\nE       AssertionError: assert ['Beauty Adviser Full Time (8h/zi) - Palas, Iasi', 'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti', 'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova', 'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES', 'STORE MANAGER - VIVO CLUJ'] == ['Beauty Adviser Full Time (8h/zi) - Palas, Iasi', 'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti', 'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti', 'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES', 'STORE MANAGER - VIVO CLUJ']\nE         At index 2 diff: 'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova' != 'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti'\nE         Full diff:\nE           [\nE            'Beauty Adviser Full Time (8h/zi) - Palas, Iasi',\nE            'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti',\nE         -  'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti',\nE         ?                                      ^  ^ ----------  ^^\nE         +  'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova',\nE         ?                                      ^^^^^  ^^^   ^^^^^ +++\nE            'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES',\nE            'STORE MANAGER - VIVO CLUJ',\nE           ]\n\ntests/test_api.py:47: AssertionError"}, "parameters": [{"name": "scraper_class", "value": "<class 'sites.sephora.sephoraScraper'>"}], "start": 1703045861749, "stop": 1703045862341, "uuid": "fbc87731-236a-4a12-b7dd-b81fb3af234e", "historyId": "2f933cac1af687b2fd252b44bb32ec75", "testCaseId": "4bc2cc6839b96c36a6ebdfe7d6ca5f68", "fullName": "tests.test_api.TestScrapers#test_scrapers", "labels": [{"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestScrapers"}, {"name": "host", "value": "fv-az1250-191"}, {"name": "thread", "value": "2377-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}