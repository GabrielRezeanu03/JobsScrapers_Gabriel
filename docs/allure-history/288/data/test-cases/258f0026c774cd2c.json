{"uid":"258f0026c774cd2c","name":"test_scrapers[dentesseScraper]","fullName":"tests.test_api.TestScrapers#test_scrapers","historyId":"7edb044a330b93d4d5f51831aba02d45","time":{"start":1702657227103,"stop":1702657229410,"duration":2307},"status":"failed","statusMessage":"AssertionError: assert ['Asistent stomatologie', 'Consilier clienti', 'Medic specialist endodont', 'Medic specialist implantolog', 'Medic specialist ortodont', 'Medic specialist protetica dentara', 'Medic stomatolog', 'Medic stomatolog pediatru'] == []\n  Left contains 8 more items, first extra item: 'Asistent stomatologie'\n  Full diff:\n    [\n  -  ,\n  +  'Asistent stomatologie',\n  +  'Consilier clienti',\n  +  'Medic specialist endodont',\n  +  'Medic specialist implantolog',\n  +  'Medic specialist ortodont',\n  +  'Medic specialist protetica dentara',\n  +  'Medic stomatolog',\n  +  'Medic stomatolog pediatru',\n    ]","statusTrace":"self = <test_api.TestScrapers object at 0x7f4929e67cd0>\nscraper_class = <class 'sites.dentesse.dentesseScraper'>\n\n    @pytest.mark.regression\n    def test_scrapers(self, scraper_class):\n        setup_tests = SetupTests()\n        setup_tests.get_jobs_careers(scraper_class)\n    \n        # You can now use the utility methods from TestUtils to avoid code duplication\n        scraped_jobs_data = TestUtils.scrape_jobs(setup_tests.scraper_data[0])\n        peviitor_jobs_data = TestUtils.scrape_peviitor(setup_tests.scraper_data[1], 'RomÃ¢nia')\n    \n        # Test Title\n>       assert sorted(scraped_jobs_data[0]) == sorted(peviitor_jobs_data[0])\nE       AssertionError: assert ['Asistent stomatologie', 'Consilier clienti', 'Medic specialist endodont', 'Medic specialist implantolog', 'Medic specialist ortodont', 'Medic specialist protetica dentara', 'Medic stomatolog', 'Medic stomatolog pediatru'] == []\nE         Left contains 8 more items, first extra item: 'Asistent stomatologie'\nE         Full diff:\nE           [\nE         -  ,\nE         +  'Asistent stomatologie',\nE         +  'Consilier clienti',\nE         +  'Medic specialist endodont',\nE         +  'Medic specialist implantolog',\nE         +  'Medic specialist ortodont',\nE         +  'Medic specialist protetica dentara',\nE         +  'Medic stomatolog',\nE         +  'Medic stomatolog pediatru',\nE           ]\n\ntests/test_api.py:47: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"scraper_class","time":{"start":1702657227103,"stop":1702657227103,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_api"},{"name":"subSuite","value":"TestScrapers"},{"name":"host","value":"fv-az1379-0"},{"name":"thread","value":"2163-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"scraper_class","value":"<class 'sites.dentesse.dentesseScraper'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["regression"]},"source":"258f0026c774cd2c.json","parameterValues":["<class 'sites.dentesse.dentesseScraper'>"]}